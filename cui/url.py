from re import Match
from urllib.parse import urlparse

from .cui import Cui
from .storage import Bytes

'''-----------------------------------------------------------------------------
'''

class Cui_Urls(Cui):
    def __init__(self):
        super().__init__(
            title="URLs",
            regex=r"""
                (?im)
                (?<![a-z0-9])
                ((([0-9A-F]{1,4}:){7}([0-9A-F]{1,4}|:))|
                (([0-9A-F]{1,4}:){6}(:[0-9A-F]{1,4}|
                ((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])
                (\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|
                (([0-9A-F]{1,4}:){5}(((:[0-9A-F]{1,4}){1,2})|
                :((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|
                2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|
                (([0-9A-F]{1,4}:){4}(((:[0-9A-F]{1,4}){1,3})|
                ((:[0-9A-F]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|
                [1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|
                :))|(([0-9A-F]{1,4}:){3}(((:[0-9A-F]{1,4}){1,4})|
                ((:[0-9A-F]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|
                [1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|
                :))|(([0-9A-F]{1,4}:){2}(((:[0-9A-F]{1,4}){1,5})|((:[0-9A-F]{1,4}){0,3}:((25[0-5]|
                2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|
                :))|(([0-9A-F]{1,4}:){1}(((:[0-9A-F]{1,4}){1,6})|((:[0-9A-F]{1,4}){0,4}:((25[0-5]|
                2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|
                :))|(:(((:[0-9A-F]{1,4}){1,7})|((:[0-9A-F]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|
                [1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?
                (?![a-z0-9])
                """,
            value=Bytes(16)
        )

    def reject(self, m: Match) -> bool:
        return m[0] == "::"

    def replacement(self, found:str) -> str:
        url = urlparse(found)
        url.netloc = f"URL_{int.from_bytes(self.value.bytes, 'big'):05d}"
        return url.geturl()
